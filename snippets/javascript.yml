# Cypress
Cypress/b:
  prefix: Cb
  body: |-
    describe("...", () => {
      it("Works", () => {
        ${0}
      })
    })

# Timing
setTimeout:
  prefix: st
  body: |-
    setTimeout(() => {
      ${0}
    }, ${1:delay})

setInterval:
  prefix: si
  body: |-
    setInterval(() => {
      ${0}
    }, ${1:delay})

setImmediate:
  prefix: sim
  body: |-
    setImmediate(() => {
      ${0}
    })

# Async
await:
  prefix: a
  body: await ${0}

await Promise.all:
  prefix: apa
  body: await Promise.all(${1:value})

await Promise.all map:
  prefix: apm
  body: |-
    await Promise.all(${1:array}.map((${2:value}) => {
      ${0}
    }))

process.env:
  prefix: pe
  body: process.env
Promise.all:
  prefix: pa
  body: Promise.all(${1:value})
Promise.resolve:
  prefix: prs
  body: Promise.resolve(${1:value})
Promise.reject:
  prefix: prj
  body: Promise.reject(${1:value})
Promise:
  prefix: p
  body: Promise
new Promise:
  prefix: np
  body: |-
    new Promise((resolve, reject) => {
      ${0}
    })
Promise.then:
  prefix: pt
  body: |-
    ${1:promise}.then((${2:value}) => {
      ${0}
    })
Promise.catch:
  prefix: pc
  body: |-
    ${1:promise}.catch(error => {
      ${0}
    })
describe:
  prefix: desc
  body: |-
    describe('${1:description}', function () {
      ${0}
    })

# It    
it sync:
  prefix: it
  body: |-
    it('${1:description}', () => {
      ${0}
    })
it async:
  prefix: ita
  body: |-
    it('${1:description}', async () => {
      ${0}
    })
it callback:
  prefix: itd
  body: |-
    it('${1:description}', (done) => {
      ${0}
    })

before:
  prefix: bf
  body: |-
    before(function () {
      ${0}
    })
beforeEach:
  prefix: bfe
  body: |-
    beforeEach(function () {
      ${0}
    })
after:
  prefix: aft
  body: |-
    after(function () {
      ${0}
    })
afterEach:
  prefix: afe
  body: |-
    afterEach(function () {
      ${0}
    })"
require:
  prefix: rq
  body: require('${1:module}')

const module = require('module'):
  prefix: cr
  body: const ${1:module} = require('${1:module}')
exports.member:
  prefix: em
  body: exports.${1:member} = ${2:value}
module.exports:
  prefix: me
  body: module.exports = ${1:name}

addEventListener:
  prefix: ae
  body: |-
    ${1:document}.addEventListener('${2:event}', ${3:ev} => {
      ${0}
    })
removeEventListener:
  prefix: rel
  body: |-
    ${1:document}.removeEventListener('${2:event}', ${3:listener})
getElementById:
  prefix: gi
  body: |-
    ${1:document}.getElementById('${2:id}')
getElementsByClassName:
  prefix: gc
  body: Array.from(${1:document}.getElementsByClassName('${2:class}'))
getElementsByTagName:
  prefix: gt
  body: Array.from(${1:document}.getElementsByTagName('${2:tag}'))
querySelector:
  prefix: qs
  body: |-
    ${1:document}.querySelector('${2:selector}')
querySelectorAll:
  prefix: qsa
  body: Array.from(${1:document}.querySelectorAll('${2:selector}'))
createDocumentFragment:
  prefix: cdf
  body: |-
    ${1:document}.createDocumentFragment(${2:elem})
createElement:
  prefix: cel
  body: |-
    ${1:document}.createElement(${2:elem})
classList.add:
  prefix: cla
  body: |-
    ${1:el}.classList.add('${2:class}')
classList.remove:
  prefix: clr
  body: |-
    ${1:el}.classList.remove('${2:class}')
classList.toggle:
  prefix: ct
  body: |-
    ${1:el}.classList.toggle('${2:class}')
getAttribute:
  prefix: ga
  body: |-
    ${1:el}.getAttribute('${2:attr}')
removeAttribute:
  prefix: ra
  body: |-
    ${1:el}.removeAttribute('${2:attr}')
setAttribute:
  prefix: sa
  body: |-
    ${1:el}.setAttribute('${2:attr}', ${3:value})
appendChild:
  prefix: ac
  body: |-
    ${1:el}.appendChild(${2:elem})
removeChild:
  prefix: rc
  body: |-
    ${1:el}.removeChild(${2:elem})
forEach loop:
  prefix: fe
  body: |-
    ${1:iterable}.forEach((${2:item}) => {
      ${0}
    })
map:
  prefix: map
  body: |-
    ${1:iterable}.map((${2:item}) => {
      ${0}
    })
reduce:
  prefix: reduce
  body: |-
    ${1:iterable}.reduce((${2:previous}, ${3:current}) => {
      ${0}
    }${4:, initial})
filter:
  prefix: filter
  body: |-
    ${1:iterable}.filter((${2:item}) => {
      ${0}
    })
find:
  prefix: find
  body: |-
    ${1:iterable}.find((${2:item}) => {
      ${0}
    })
every:
  prefix: every
  body: |-
    ${1:iterable}.every((${2:item}) => {
      ${0}
    })
some:
  prefix: some
  body: |-
    ${1:iterable}.some((${2:item}) => {
      ${0}
    })
var statement:
  prefix: v
  body: var ${1:name}
var assignment:
  prefix: va
  body: var ${1:name} = ${2:value}
let statement:
  prefix: l
  body: let ${1:name}
const statement:
  prefix: c
  body: const ${1:name}
const statement from destructuring:
  prefix: cd
  body:
  - const {${1:name}} = ${2:value}
  - "$0"
const assignment awaited:
  prefix: ca
  body: const ${1:name} = await ${2:value}
let assignment awaited:
  prefix: la
  body: let ${1:name} = await ${2:value}
const assignment yielded:
  prefix: cy
  body: const ${1:name} = yield ${2:value}
let assignment yielded:
  prefix: ly
  body: let ${1:name} = yield ${2:value}
const object:
  prefix: co
  body: |-
    const ${1:name} = {
      ${0}
    }
const array:
  prefix: car
  body: |-
    const ${1:name} = [
      ${0}
    ]
class:
  prefix: cs
  body: |-
    class ${1:name} {
      constructor (${2:arguments}) {
        ${0}
      }
    }
class extends:
  prefix: csx
  body: |-
    class ${1:name} extends ${2:base} {
      constructor (${3:arguments}) {
        super(${3:arguments})
        ${0}
      }
    }
module export:
  prefix: e
  body: export ${1:member}
module export const:
  prefix: ec
  body: export const ${1:member} = ${2:value}
module default export:
  prefix: ed
  body: export default ${1:member}
module default export function:
  prefix: edf
  body: |-
    export default function ${1:name} (${2:arguments}) {
      ${0}
    }
import module:
  prefix: im
  body: import ${1:*} from '${2:module}'
import module as:
  prefix: ia
  body: import ${1:*} as ${2:name} from '${3:module}'
import module destructured:
  prefix: id
  body: import {$1} from '${2:module}'
typeof:
  prefix: t
  body: typeof ${1:source} === '${2:undefined}'
instanceof:
  prefix: iof
  body: |-
    ${1:source} instanceof ${2:Object}
Array.isArray():
  prefix: ia
  body: Array.isArray(${1:source})
let and if statement:
  prefix: lif
  body: |-
    let ${0} 
     if (${2:condition}) {
      ${1}
    }
if statement:
  prefix: i
  body: |-
    if (${1:condition}) {
      ${0}
    }
else statement:
  prefix: el
  body: |-
    else {
      ${0}
    }
if/else statement:
  prefix: ife
  body: |-
    if (${1:condition}) {
      ${0}
    } else {
      
    }
else if statement:
  prefix: ei
  body: |-
    else if (${1:condition}) {
      ${0}
    }
for loop:
  prefix: fl
  body: |-
    for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len};
    ${1:i}++) {
      ${0}
    }
for in loop:
  prefix: fi
  body: |-
    for (let ${1:key} in ${2:source}) {
      if (${2:source}.hasOwnProperty(${1:key}))
    {
        ${0}
      }
    }
for of loop:
  prefix: fo
  body: |-
    for (let ${1:key} of ${2:source}) {
      ${0}
    }
while iteration decrementing:
  prefix: wid
  body: |-
    let ${1:array}Index = ${1:array}.length
    while (${1:array}Index--) {
      ${0}
    }
while loop:
  prefix: wl
  body: |-
    while (${1:condition}) {
      ${0}
    }
throw new Error:
  prefix: tn
  body: throw new ${0:error}
try/catch:
  prefix: tc
  body: |-
    try {
      ${0}
    } catch (${1:err}) {
      
    }
try/finally:
  prefix: tf
  body: |-
    try {
      ${0}
    } finally {
      
    }
try/catch/finally:
  prefix: tcf
  body: |-
    try {
      ${0}
    } catch (${1:err}) {
      
    } finally {
      
    }
anonymous function:
  prefix: fan
  body: function (${1:arguments}) {${0}}
named function:
  prefix: fn
  body: |-
    function ${1:name} (${2:arguments}) {
      ${0}
    }
async function:
  prefix: asf
  body: |-
    async function (${1:arguments}) {
      ${0}
    }
async arrow function:
  prefix: aa
  body: |-
    async (${1:arguments}) => {
      ${0}
    }
arrow function:
  prefix: af
  body: |-
    (${1:arguments}) => ${2:statement}
arrow function with destructuring:
  prefix: fd
  body: |-
    ({${1:arguments}}) => ${2:statement}"
arrow function with body:
  prefix: f
  body: |-
    (${1:arguments}) => {
      ${0}
    }
generator function:
  prefix: gf
  body: |-
    function* (${1:arguments}) {
      ${0}
    }
named generator:
  prefix: gfn
  body: |-
    function* ${1:name}(${2:arguments}) {
      ${0}
    }
console.log:
  prefix: cl
  body: console.log(${0})
console.log a variable:
  prefix: cv
  body: console.log('${0}:', ${0})
console.error:
  prefix: ce
  body: console.error(${0})
console.warn:
  prefix: cw
  body: console.warn(${0})
console.dir:
  prefix: cod
  body: console.dir('${0}:', ${0})
constructor:
  prefix: cn
  body: |-
    constructor () {
      ${0}
    }

JSON.stringify():
  prefix: js
  body: JSON.stringify($0)
JSON.parse():
  prefix: jp
  body: JSON.parse($0)
method:
  prefix: m
  body: |-
    ${1:method} (${2:arguments}) {
      ${0}
    }

Object.keys:
  prefix: ok
  body: Object.keys(${1:obj})


# Yield
yield:
  prefix: y
  body: yield ${0}


# Return
return:
  prefix: r
  body: return ${0}
return this:
  prefix: rt
  body: return this
return null:
  prefix: rn
  body: return null
return new object:
  prefix: ro
  body: |-
    return {
      ${0}
    }
return new array:
  prefix: ra
  body: |-
    return [
      ${0}
    ]
return promise:
  prefix: rp
  body: |-
    return new Promise((resolve, reject) => {
      ${0}
    })
